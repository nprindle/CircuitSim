// Taken from: https://github.com/melix/mrjar-gradle/
// But can't use their strategy of passing --release to the compiler
// because we're trying to get around incompatibilities in the standard
// library, not the language. Telling the compiler to produce java 8
// bytecode won't magically give us access to packages we can't even
// access in java 9 javafx

static String compat(String src) {
    if (src.contains('.')) {
        src.substring(src.lastIndexOf('.')+1)
    } else {
        src
    }
}

project.afterEvaluate {
    tasks.withType(JavaCompile) {
        def version = compat(sourceCompatibility)
        def jdkHome = System.getenv("JAVA_HOME")

        if (!jdkHome) {
             throw new GradleException(
                "Please set path to JDK 11 using environment " \
                + "variable \$JAVA_HOME. (After you do, you may " \
                + "have to kill the gradle daemon with `./gradlew --stop'.)")
        } else {
            options.fork = true
            options.forkOptions.javaHome = file(jdkHome)
            doFirst {
                println "$name compiles using JDK $version"
            }
        }
    }
}
