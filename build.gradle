apply plugin: 'java-library'

compileJava.options.encoding = 'UTF-8'

// Use the mrjar gradle plugin copied from
// https://github.com/melix/mrjar-gradle/
apply from: 'jdks.gradle'

def mainClassName = 'com.ra4king.circuitsim.gui.CircuitSim'

// Tell gradle to look for source code and resources in `/src/', not
// `/src/java/main/'.
// https://docs.gradle.org/current/userguide/java_plugin.html#sec:working_with_java_source_sets
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['tests']
        }
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    implementation 'com.google.code.gson:gson:2.8.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.+'
}

compileJava {
   sourceCompatibility = 11
   targetCompatibility = 11
}

jar {
    manifest {
        attributes(
            'Multi-Release': 'true',
            'Main-Class': mainClassName
        )
    }

    // Bundle dependencies with jar
    // See: http://stackoverflow.com/a/4894308
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Can't use the run task in the application plugin because it doesn't
// build the multi-platform jar â€” it just runs the class directly
task run(type: JavaExec) {
    dependsOn jar
    classpath files(jar.archivePath)
    main = mainClassName
}
